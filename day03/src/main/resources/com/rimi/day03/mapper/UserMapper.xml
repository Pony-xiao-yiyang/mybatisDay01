<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="com.rimi.day03.mapper.UserMapper">


    <!--
         resultMap  自定义结果映射,默认和resultType规则一样
              属性：     id  结果映射的唯一id
                        type  结果映射的对象
                        autoMapping="true"  等价于  autoMappingBehavior 为FULL
                                     false  等价于  autoMappingBehavior 为NONE
              子标签：
                    id 标签：  设置主键的属性名和列名

                         property： 指明当前对象的属性名
                         javatype： 指明当前对象的属性的类型，如果是java bean，可以省略，自动推断
                         column：    指明当前列的列名
                         jdbcType    JDBC驱动对应的类型，只有在使用JDBC编程时配置，一般不写

                   result 标签。 设置普通字段的属性名和列名映射

                        默认使用set方法
                   constructor   采用构造方法的形式，创建并填充数据
                        使用构造方法注入参数，一定要设置
                                column  数据结果集的列名
                                javaType    方法参数的类型的别名

                        使用构造方法注入数据，如果没有指定@Param的参数名，默认按照从左到右的顺序，根据参数的类型去匹配
                                              如果指定了所有参数的@Param的参数名， 顺序可以自定义
                   association   关联标签，用于”有一个“的多表关联查询
                        方案一
                        关联的嵌套 Select 查询
                               先查询第一张表，然后根据关联字段的关联id， 再查询第二张表，最后将数据整合
                                属性：
                                    property java bean的属性名
                                    column   关联关系的关联id所在列的列名
                                    javaType   当前属性对应的数据库实体java bean的名称
                                    select      第二次查询执行的sql语句
                             <association property="huji" column="huji_id" javaType="com.rimi.day03.bean.HuJiDi" select="com.rimi.day03.mapper.HuJiDiMapper.findHuJiDiById" />
                        方案二
                            关联的嵌套结果映射
                                使用连接查询进行多表查询
                                注意: mybatis 默认只对简单结果进行自动映射
                                    autoMapping   是否开启自动映射，默认关闭
                                    columnPrefix  统一添加前缀

                        <association property="huji" javaType="com.rimi.day03.bean.HuJiDi" autoMapping="true" columnPrefix="h_">
                            <result property="paiChuSuo" column="pcs" />
                        </association>
    -->
    <resultMap id="userMap" type="user" autoMapping="true" >
        <id property="id" column="id" />
        <result property="username" column="username"/>
        <result property="insertTime" column="insert_time"/>

        <!--<constructor>-->
            <!--<idArg column="user_id" javaType="integer" name="id"/>-->

            <!--<arg column="header_image" javaType="string" name="header"/>-->
            <!--<arg column="insert_time" javaType="date" name="time"/>-->
        <!--</constructor>-->


        <!--<association property="huji" column="huji_id" javaType="com.rimi.day03.bean.HuJiDi" select="com.rimi.day03.mapper.HuJiDiMapper.findHuJiDiById" />-->

        <!--
            如果两张表之前没有重复的列名，可以直接使用自动映射
                如果一旦重复，先给sql语句，的结果，设置别名，带统一前缀，通过指定前缀名，才可以完成自动映射
         -->
        <!--<association property="huji" javaType="com.rimi.day03.bean.HuJiDi" autoMapping="true" columnPrefix="h_">-->
            <!--<result property="paiChuSuo" column="pcs" />-->
        <!--</association>-->
        <association property="huji" javaType="com.rimi.day03.bean.HuJiDi" autoMapping="true">
            <id property="id" column="h_id"/>
            <result property="paiChuSuo" column="pcs" />
        </association>

        <!--
              collection  集合标签，用来表述“有多个"的关联关系
                方案一：
                    集合的嵌套 Select 查询
                        先查第一张表，通过关联的id字段，查询第二张和第三张表
                            property  java bean对象中，对应的集合的属性名
                            javaType    当前集合的类型
                            ofType      集合中的真实类型

                            二次查询： 根据user表的user id，查询出当前user的所有的role角色信息
                                    column      用哪一列进行关联查询
                                    select      根据用户id，查询用户对应的所有的角色信息
                        <collection property="roles" javaType="arraylist" column="id" ofType="role" select="com.rimi.day03.mapper.RoleMapper.findRoleByUserId" />
                方案二：
                    集合的嵌套结果映射


        -->
        <!--<collection property="roles" javaType="arraylist" column="id" ofType="role" select="com.rimi.day03.mapper.RoleMapper.findRoleByUserId" />-->


    </resultMap>


    <select id="findUserByUsernameLike" resultType="user">

        select * from book_sys_user where username like concat('%',#{param1},'%')

        <!--select * from book_sys_user where username like '%${param1}%'-->
    </select>


    <!--
        通过select 标签的resultMap属性进行关联，关联到resultMap的id
    -->
    <!--<select id="findAll" resultMap="userMap">-->
        <!--select * from book_sys_user-->
    <!--</select>-->

    <!--<select id="findAll" resultMap="userMap">-->
        <!--select-->
            <!--u.id as id,-->
            <!--u.username as username,-->
            <!--u.password as password,-->
            <!--u.nickname as nickname,-->
            <!--u.insert_time as insert_time,-->
            <!--u.last_modified_time as last_modified_time,-->
            <!--u.header_image as header_image,-->
            <!--h.id as h_id,-->
            <!--h.hu_ji_di as h_hu_ji_di,-->
            <!--h.pcs as h_pcs,-->
            <!--h.idcard as h_idcard,-->
            <!--h.join_time as h_join_time-->
        <!--from book_sys_user u-->
        <!--join book_sys_user_hj h-->
        <!--on u.huji_id = h.id-->
    <!--</select>-->

    <select id="findAll" resultMap="userMap">
        select
            *
        from book_sys_user u
        join book_sys_user_hj h
        on u.huji_id = h.h_id
    </select>
</mapper>